swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Ideeninitiative"
basePath: "/v2"
tags:
  - name: "benutzer"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /idee:
    get:
      tags:
        - idee
      summary: "Alle Ideen abrufen"
      operationId: "alleIdeenAbrufen"
      produces:
        - "application/json"
      responses:
        200:
          description: "erfolgreich"
          schema:
            type: "string"
        500:
          description: "Es gab einen unerwarteten internen Server-Fehler."
          schema:
            type: "string"
  /idee/meineideen:
    get:
      tags:
        - idee
      summary: "Benutzerspezifische Ideen abrufen"
      operationId: "meineIdeen"
      produces:
        - "application/json"
      responses:
        200:
          description: "erfolgreich"
          schema:
            type: "string"
        500:
          description: "Es gab einen unerwarteten internen Server-Fehler."
          schema:
            type: "string"
  /benutzer:
    post:
      tags:
        - "benutzer"
      summary: "Benutzer registrieren"
      description: "This can only be done by the logged in user."
      operationId: "benutzerRegistrieren"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "benutzer"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/Benutzer"
      responses:
        200:
          description: "erfolgreich"
          schema:
            type: "string"
        400:
          description: "Fehlende Eingabe"
          schema:
            $ref: '#/definitions/ApiFehler'
  /benutzer/login:
    post:
      tags:
        - "benutzer"
      summary: "Logs user into the system"
      description: ""
      operationId: "benutzerAnmelden"
      produces:
        - "application/json"
      parameters:
        - name: "anmeldedaten"
          in: "body"
          description: "Der Benutzername des einzuloggenden Benutzers"
          required: true
          schema:
            type: object
            required:
              - userName
            properties:
              benutzername:
                type: string
                minLength: 1
              passwort:
                type: string
                minLength: 8
      responses:
        200:
          description: "erfolgreich"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Ungültige Benutzerdaten"
  /benutzer/logout:
    get:
      tags:
        - "benutzer"
      summary: "Meldet den aktuellen Benutzer ab"
      description: ""
      operationId: "benutzerAbmelden"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "erfolgreich"
  /benutzer/{benutzername}:
    get:
      tags:
        - "benutzername"
      summary: "Benutzerdaten zu Benutzernamen laden"
      description: ""
      operationId: "benutzerdatenAusgeben"
      produces:
        - "application/json"
      parameters:
        - name: "benutzername"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
          minLength: 1
      responses:
        200:
          description: "erfolgreich"
          schema:
            $ref: "#/definitions/Benutzer"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "benutzer"
      summary: "Benutzerdaten aktualisieren"
      description: "This can only be done by the logged in user."
      operationId: "benutzerdatenAktualisieren"
      produces:
        - "application/json"
      parameters:
        - name: "benutzername"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
          minLength: 1
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/Benutzer"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "benutzer"
      summary: "Benutzer löschen"
      description: "This can only be done by the logged in user."
      operationId: "benutzerdatenLoeschen"
      produces:
        - "application/json"
      parameters:
        - name: "benutzername"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
          minLength: 1
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Benutzer:
    type: "object"
    required:
      - "benutzername"
      - "vorname"
      - "nachname"
      - "email"
    properties:
      benutzername:
        type: "string"
        minLength: 1
      vorname:
        type: "string"
        minLength: 1
      nachname:
        type: "string"
        minLength: 1
      email:
        type: "string"
        minLength: 6
      passwort:
        type: "string"
        minLength: 8
    xml:
      name: "Mitarbeiter"
  ApiFehler:
    type: "object"
    properties:
      httpStatusCode:
        type: "integer"
        format: "int32"
      fehlertyp:
        type: "string"
      fehlertext:
        type: "string"